<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>DONG-ZHOU</title>
 <link href="http://zhou-dong.github.io/" rel="self"/>
 <link href="http://zhou-dong.github.io"/>
 <updated>2014-12-02T19:22:07+08:00</updated>
 <id>http://zhou-dong.github.io</id>
 <author>
   <name>Dong Zhou</name>
   <email>82224165@qq.com</email>
 </author>

 
 <entry>
   <title>Machine Learning</title>
   <link href="http://zhou-dong.github.io/2014/12/02/machinel-learning"/>
   <updated>2014-12-02T00:00:00+08:00</updated>
   <id>http://zhou-dong.github.io/2014/12/02/machinel-learning</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://ufldl.stanford.edu/wiki/index.php/UFLDL_Tutorial&quot;&gt;UFLDL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ufldl.stanford.edu/wiki/index.php/UFLDL%E6%95%99%E7%A8%8B&quot;&gt;UFLDL教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=MachineLearning&quot;&gt;Machine Learning - Andrew Ng&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.holehouse.org/mlclass/index.html&quot;&gt;Stanford Machine Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zhihu.com/question/20691338&quot;&gt;机器学习该怎么入门&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>网站技术点</title>
   <link href="http://zhou-dong.github.io/2014/11/30/web-technology"/>
   <updated>2014-11-30T00:00:00+08:00</updated>
   <id>http://zhou-dong.github.io/2014/11/30/web-technology</id>
   <content type="html">
&lt;h4 id=&quot;dns&quot;&gt;DNS供应商&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;www.godaddy.com&lt;/li&gt;
  &lt;li&gt;www.name.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cdn&quot;&gt;CDN服务商&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;蓝汛、网宿、Webluker、帝联、阿里云、安全宝、加速乐、快网、17CDN&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;负载均衡&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;LVS&lt;/li&gt;
  &lt;li&gt;NGIX&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;静态文件代理/缓存&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Squid&lt;/li&gt;
  &lt;li&gt;Varnish&lt;/li&gt;
  &lt;li&gt;Ngix&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;前端&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Bootstrap&lt;/li&gt;
  &lt;li&gt;AngularJS&lt;/li&gt;
  &lt;li&gt;Jquery&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-3&quot;&gt;后端&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Express.js&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;Tomcat + apr&lt;/li&gt;
  &lt;li&gt;Appserver&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-4&quot;&gt;消息中间件&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ZeroMQ&lt;/li&gt;
  &lt;li&gt;RocketMQ&lt;/li&gt;
  &lt;li&gt;Netty&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/twitter/kestrel&quot;&gt;twitter/jestrel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-5&quot;&gt;存储系统&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;程序内存储
    &lt;ul&gt;
      &lt;li&gt;Ehcache&lt;/li&gt;
      &lt;li&gt;LRU&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/bulldog2011/bigqueue.git&quot;&gt;Bigqueue&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;传统关系型数据库
    &lt;ul&gt;
      &lt;li&gt;Mqsql&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;嵌入式数据库
    &lt;ul&gt;
      &lt;li&gt;LevelDB（LSM）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式数据库
    &lt;ul&gt;
      &lt;li&gt;MongoDB&lt;/li&gt;
      &lt;li&gt;CouchDB&lt;/li&gt;
      &lt;li&gt;Hbase&lt;/li&gt;
      &lt;li&gt;OceanBase&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;内存数据库
    &lt;ul&gt;
      &lt;li&gt;Redis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式图片存储
    &lt;ul&gt;
      &lt;li&gt;TFS&lt;/li&gt;
      &lt;li&gt;FASTDFS&lt;/li&gt;
      &lt;li&gt;MOGILEFS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-6&quot;&gt;搜索产品&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Solr&lt;/li&gt;
  &lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-7&quot;&gt;分布式任务控制&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Zookeeper&lt;/li&gt;
  &lt;li&gt;Dubbo&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-8&quot;&gt;公共产品开发&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;分布式session共享
    &lt;ul&gt;
      &lt;li&gt;Redis&lt;/li&gt;
      &lt;li&gt;Jetty&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式Scheduler
    &lt;ul&gt;
      &lt;li&gt;quartz + LevelDB/MongoDB + Zookeeper&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-9&quot;&gt;数据收集和分析&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Flume + Log4J&lt;/li&gt;
  &lt;li&gt;Hadoop&lt;/li&gt;
  &lt;li&gt;Spark&lt;/li&gt;
  &lt;li&gt;Strom&lt;/li&gt;
  &lt;li&gt;Mahout&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-10&quot;&gt;爬虫系统&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;防屏蔽
    &lt;ul&gt;
      &lt;li&gt;动态ADSL切换(家庭网络)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;程序开发
    &lt;ul&gt;
      &lt;li&gt;PhantomJs + Node.js&lt;/li&gt;
      &lt;li&gt;Webkit C++ 内核&lt;/li&gt;
      &lt;li&gt;Java Httputil&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-11&quot;&gt;系统运维和监控&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Cacti&lt;/li&gt;
  &lt;li&gt;Zabbix&lt;/li&gt;
  &lt;li&gt;Ganglia&lt;/li&gt;
  &lt;li&gt;Zookeepr监控&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-12&quot;&gt;服务器虚拟化&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-13&quot;&gt;操作系统&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;服务器操作系统
    &lt;ul&gt;
      &lt;li&gt;CentOS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;开发操作系统
    &lt;ul&gt;
      &lt;li&gt;Macbook&lt;/li&gt;
      &lt;li&gt;Fedora&lt;/li&gt;
      &lt;li&gt;Ubuntu&lt;/li&gt;
      &lt;li&gt;openSUSE&lt;/li&gt;
      &lt;li&gt;Debian&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;vps&quot;&gt;VPS提供商&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;AWS&lt;/li&gt;
  &lt;li&gt;阿里云&lt;/li&gt;
  &lt;li&gt;linode(linux node)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-14&quot;&gt;自然语言处理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;CRFPP&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nltk.org/&quot;&gt;NLTK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-15&quot;&gt;版本控制&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Git + GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-16&quot;&gt;博客&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Gitpages + Jekyll + markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-17&quot;&gt;开发语言&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;Javscript&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;C++&lt;/li&gt;
  &lt;li&gt;C Language&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>English Vocabulary Thinking</title>
   <link href="http://zhou-dong.github.io/2014/11/30/english-vocabulary"/>
   <updated>2014-11-30T00:00:00+08:00</updated>
   <id>http://zhou-dong.github.io/2014/11/30/english-vocabulary</id>
   <content type="html">
&lt;h4 id=&quot;section&quot;&gt;不只是长篇的文学作品，&lt;code&gt;文字&lt;/code&gt;或者&lt;code&gt;单词&lt;/code&gt;才是一个名族文化的浓缩和核心。如：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Odyssey：漫长而艰苦的旅程。来自于：特洛伊战争后，奥迪赛和他的小伙伴们经历种种困难终于回到家乡的故事。&lt;/li&gt;
  &lt;li&gt;exodus ：大批的离去。 来自于：圣经故事中的出埃及记。&lt;/li&gt;
  &lt;li&gt;narcissus：水仙花。源于希腊神话中一个叫Narcissus的青年，他因眷恋自己在水中的形象而死去，死后变成了花，人们称之为水仙花。&lt;/li&gt;
  &lt;li&gt;narcissism：自恋，自我陶醉。自恋的Narcissus。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;英语单词就像汉字一样，也是有边旁部首的，只不过英语中叫做&lt;code&gt;词根&lt;/code&gt;、&lt;code&gt;前缀&lt;/code&gt;、&lt;code&gt;后缀&lt;/code&gt;。&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;orthodox：正统的人或事。 ortho：right；dox：opinion。&lt;/li&gt;
  &lt;li&gt;heterodox：异端的、非正统的。hetero：不同的；dox：opinion。&lt;/li&gt;
  &lt;li&gt;paradox：悖论。para：高于、反面；dox：opinion。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;与跟汉字一样，造词和读音是两个系统。&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;metabolism：新陈代谢。读音：[mɪ’tæbəlɪz(ə)m]；造词：mata[改变] + bolism。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-3&quot;&gt;目的：&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;从理论上明确单词的组成。&lt;/li&gt;
  &lt;li&gt;让自己背单词的过程不那么的枯燥。&lt;/li&gt;
  &lt;li&gt;总结自己的收获。&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Study List</title>
   <link href="http://zhou-dong.github.io/2014/11/28/study-list"/>
   <updated>2014-11-28T00:00:00+08:00</updated>
   <id>http://zhou-dong.github.io/2014/11/28/study-list</id>
   <content type="html">
&lt;h3 id=&quot;program-language&quot;&gt;Program Language&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;C&lt;/li&gt;
  &lt;li&gt;C++&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;english-study&quot;&gt;English Study&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TOEFL&lt;/li&gt;
  &lt;li&gt;GRE&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;master-course&quot;&gt;Master Course&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Natural Language Process&lt;/li&gt;
  &lt;li&gt;Machine Learning&lt;/li&gt;
  &lt;li&gt;Deep Learning&lt;/li&gt;
  &lt;li&gt;Neural Networks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fedora&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other&quot;&gt;Other&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;School Transfer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;american-life&quot;&gt;American Life&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Credit card apply&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-course&quot;&gt;Basic Course&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;高等数学-上&lt;/li&gt;
  &lt;li&gt;高等数学-下&lt;/li&gt;
  &lt;li&gt;概率论与数理统计&lt;/li&gt;
  &lt;li&gt;算法&lt;/li&gt;
  &lt;li&gt;矩阵计算&lt;/li&gt;
  &lt;li&gt;离散数学&lt;/li&gt;
  &lt;li&gt;信息论&lt;/li&gt;
  &lt;li&gt;凸优化	&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>我的书架</title>
   <link href="http://zhou-dong.github.io/2014/11/27/book-list"/>
   <updated>2014-11-27T00:00:00+08:00</updated>
   <id>http://zhou-dong.github.io/2014/11/27/book-list</id>
   <content type="html">
&lt;ol&gt;
  &lt;li&gt;鸟哥的Linux私房菜服务器架设篇（第二版）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;牧羊少年奇幻之旅&lt;/strong&gt; &lt;/li&gt;
  &lt;li&gt;小王子&lt;/li&gt;
  &lt;li&gt;精通CSS：高级Web标准解决方案（第2版）&lt;/li&gt;
  &lt;li&gt;Java编程思想（第4版）&lt;/li&gt;
  &lt;li&gt;操作系统：精髓与设计原理（原书第6版）&lt;/li&gt;
  &lt;li&gt;人月神话（32周年中文纪念版）&lt;/li&gt;
  &lt;li&gt;编译原理（第2版）&lt;/li&gt;
  &lt;li&gt;程序员修炼之道——从小工到专家&lt;/li&gt;
  &lt;li&gt;代码大全&lt;/li&gt;
  &lt;li&gt;设计模式 可复用面向对象软件的基础&lt;/li&gt;
  &lt;li&gt;计算机程序的构造和解释：原书第2版&lt;/li&gt;
  &lt;li&gt;追风筝的人&lt;/li&gt;
  &lt;li&gt;算法导论(原书第2版)&lt;/li&gt;
  &lt;li&gt;魔术的耳语&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;大卫的伤疤&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;浪潮之巅&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;美国种族简史&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;世界上的另一个你&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lucene实战(第2版)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;这个历史挺靠谱·全三册&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数学之美&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;如丧——我们终于老得可以谈谈未来&lt;/li&gt;
  &lt;li&gt;百年孤独&lt;/li&gt;
  &lt;li&gt;美国怎么了：一个自由主义者的良知&lt;/li&gt;
  &lt;li&gt;《虎妈战歌》&lt;/li&gt;
  &lt;li&gt;孤独天使&lt;/li&gt;
  &lt;li&gt;傲慢与偏见-Pride and Prejudice（典藏英文原版）&lt;/li&gt;
  &lt;li&gt;生猛的进化心理学&lt;/li&gt;
  &lt;li&gt;带着鲑鱼去旅行&lt;/li&gt;
  &lt;li&gt;宇宙简史—霍金系列讲座精华&lt;/li&gt;
  &lt;li&gt;李敖快意恩仇录&lt;/li&gt;
  &lt;li&gt;霍乱时期的爱情&lt;/li&gt;
  &lt;li&gt;算法竞赛入门经典&lt;/li&gt;
  &lt;li&gt;自控力&lt;/li&gt;
  &lt;li&gt;走进搜索引擎（第2版）&lt;/li&gt;
  &lt;li&gt;拖延心理学&lt;/li&gt;
  &lt;li&gt;编程之美&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;这就是搜索引擎&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;暗时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;禅与摩托车维修艺术&lt;/li&gt;
  &lt;li&gt;Hadoop实战&lt;/li&gt;
  &lt;li&gt;Hadoop权威指南&lt;/li&gt;
  &lt;li&gt;MongoDB 权威指南&lt;/li&gt;
  &lt;li&gt;畅游英国&lt;/li&gt;
  &lt;li&gt;不减20斤就别说你瘦了&lt;/li&gt;
  &lt;li&gt;世界通史（彩图）&lt;/li&gt;
  &lt;li&gt;1988——我想和这个世界谈谈&lt;/li&gt;
  &lt;li&gt;人类群星闪耀时&lt;/li&gt;
  &lt;li&gt;《朝圣》&lt;/li&gt;
  &lt;li&gt;牛奶可乐经济学（完整版）&lt;/li&gt;
  &lt;li&gt;不能承受的生命之轻（百万纪念版）&lt;/li&gt;
  &lt;li&gt;算法竞赛入门经典&lt;/li&gt;
  &lt;li&gt;编程珠玑（第2版）&lt;/li&gt;
  &lt;li&gt;正能量&lt;/li&gt;
  &lt;li&gt;史蒂夫·乔布斯传 精装版&lt;/li&gt;
  &lt;li&gt;上帝掷骰子吗？&lt;/li&gt;
  &lt;li&gt;淘宝技术这十年&lt;/li&gt;
  &lt;li&gt;1984.动物庄园&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;三体3：死神永生&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;三体2：黑暗森林&lt;/li&gt;
  &lt;li&gt;三体1：地球往事&lt;/li&gt;
  &lt;li&gt;信息检索导论&lt;/li&gt;
  &lt;li&gt;搜索引擎技术基础&lt;/li&gt;
  &lt;li&gt;Head First 设计模式（中文版）&lt;/li&gt;
  &lt;li&gt;时间简史（插图本）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;构建高性能Web站点&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Effective Java中文版(第2版)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;挪威的森林（村上春树经典著作）&lt;/li&gt;
  &lt;li&gt;把你的英语用起来&lt;/li&gt;
  &lt;li&gt;数据挖掘导论(完整版)&lt;/li&gt;
  &lt;li&gt;机器学习（决战大数据时代！IT技术人员不得不读！）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;历史深处的忧虑：近距离看美国之一&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;总统是靠不住的：近距离看美国之二&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;我也有一个梦想：近距离看美国之三&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如彗星划过夜空：近距离看美国之四&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;算法（第4版）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java并发编程实战&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;像自由一样美丽&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;西班牙旅行笔记&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;一路走来一路读&lt;/li&gt;
  &lt;li&gt;离散数学&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Effective Java中文版(第2版)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;从一到无穷大&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;扫起落叶好过冬(林达著)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;黑客与画家&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;重来（更为简单有效的商业思维 ）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;物理世界奇遇记(中译本）&lt;/li&gt;
  &lt;li&gt;啊哈，灵机一动&lt;/li&gt;
  &lt;li&gt;银河帝国&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;深入浅出Node.js&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;大话处理器&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;七周七语言&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;JavaScript高级程序设计&lt;/li&gt;
  &lt;li&gt;GRE词汇精选&lt;/li&gt;
  &lt;li&gt;深入理解计算机系统&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;重构：改善既有代码的设计&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;TCP/IP 详解(卷1:协议)&lt;/li&gt;
  &lt;li&gt;巴西：未来之国&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;汇编语言(第3版）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;深入理解Java虚拟机&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;推荐系统实践&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;社交网站的数据挖掘与分析&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;信息简史&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;计算机程序设计艺术 卷4A&lt;/li&gt;
  &lt;li&gt;敏捷软件开发——原则、模式与实践&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;维罗妮卡决定去死&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;少女布莱达灵修之旅&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;魔鬼与普里姆小姐&lt;/li&gt;
  &lt;li&gt;波多贝罗的女巫&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;大型网站技术架构&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;大规模分布式存储系统&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;机器学习实战&lt;/li&gt;
  &lt;li&gt;统计自然语言处理&lt;/li&gt;
  &lt;li&gt;啊哈C！思考快你一步&lt;/li&gt;
  &lt;li&gt;统计学习方法&lt;/li&gt;
  &lt;li&gt;大数据日知录：架构与算法&lt;/li&gt;
  &lt;li&gt;大型网站系统与Java中间件实践&lt;/li&gt;
  &lt;li&gt;编程珠玑：续&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把信送给加西亚&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;万物简史&lt;/li&gt;
  &lt;li&gt;《大设计》&lt;/li&gt;
  &lt;li&gt;量子宇宙&lt;/li&gt;
  &lt;li&gt;啊哈！算法&lt;/li&gt;
  &lt;li&gt;我的简史&lt;/li&gt;
  &lt;li&gt;少有人走的路&lt;/li&gt;
  &lt;li&gt;如何阅读一本书&lt;/li&gt;
  &lt;li&gt;模式识别（第四版）&lt;/li&gt;
  &lt;li&gt;概率论与数理统计习题全解指南 浙大第四版&lt;/li&gt;
  &lt;li&gt;线性代数(原书第7版)&lt;/li&gt;
  &lt;li&gt;高效程序员的45个习惯：敏捷开发修炼之道&lt;/li&gt;
  &lt;li&gt;高等数学 同济第六版(上册)&lt;/li&gt;
  &lt;li&gt;高等数学 同济第六版（下册）&lt;/li&gt;
  &lt;li&gt;数据挖掘导论(完整版)&lt;/li&gt;
  &lt;li&gt;概率论与数理统计 浙大第四版（新版）&lt;/li&gt;
  &lt;li&gt;C++ Primer中文版（第5版）&lt;/li&gt;
  &lt;li&gt;More Effective C++&lt;/li&gt;
  &lt;li&gt;Effective C++&lt;/li&gt;
  &lt;li&gt;Web 前端黑客技术揭秘&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;深入浅出统计学&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;从你的全世界路过：让所有人心动的故事(电子书)&lt;/li&gt;
  &lt;li&gt;向前一步(电子书)&lt;/li&gt;
  &lt;li&gt;全球最美的地方精华特辑.走遍美国(电子书)&lt;/li&gt;
  &lt;li&gt;卡耐基当众演讲的艺术(电子书)&lt;/li&gt;
  &lt;li&gt;你一定爱读的极简欧洲史(电子书) &lt;/li&gt;
  &lt;li&gt;UNIX编程艺术&lt;/li&gt;
  &lt;li&gt;英语阅读参考手册&lt;/li&gt;
  &lt;li&gt;深入浅出数据分析&lt;/li&gt;
  &lt;li&gt;谁说菜鸟不会数据分析&lt;/li&gt;
  &lt;li&gt;果壳中的宇宙·霍金（插图本） &lt;/li&gt;
  &lt;li&gt;文明之光 1-2 套装全2册 &lt;/li&gt;
  &lt;li&gt;线性代数及其应用（原书第3版） &lt;/li&gt;
  &lt;li&gt;Vim实用技巧 &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;信息简史&lt;/strong&gt; &lt;/li&gt;
  &lt;li&gt;MacTalk 人生元编程 &lt;/li&gt;
  &lt;li&gt;Mahout实战 &lt;/li&gt;
  &lt;li&gt;程序员的数学 &lt;/li&gt;
  &lt;li&gt;CPU自制入门 &lt;/li&gt;
  &lt;li&gt;Aha!Gotcha啊哈!原来如此&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;代码整洁之道&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Head First Python（中文版）&lt;/li&gt;
  &lt;li&gt;鸟哥的Linux私房菜 基础学习篇(第三版)&lt;/li&gt;
  &lt;li&gt;此生未完成：一个母亲、妻子、女儿的生命日记&lt;/li&gt;
  &lt;li&gt;白鹿原&lt;/li&gt;
  &lt;li&gt;看见&lt;/li&gt;
  &lt;li&gt;重口味心理学&lt;/li&gt;
  &lt;li&gt;偷影子的人&lt;/li&gt;
  &lt;li&gt;沃顿商学院最受欢迎的谈判课&lt;/li&gt;
  &lt;li&gt;天才在左疯子在右 &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://zhou-dong.github.io/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://zhou-dong.github.io/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation.
What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary
&lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website.
The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
